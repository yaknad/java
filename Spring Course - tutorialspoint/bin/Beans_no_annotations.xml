<?xml version = "1.0" encoding = "UTF-8"?>

<!-- Tutorial: https://www.tutorialspoint.com/spring/index.htm -->


<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
	xmlns:p="http://www.springframework.org/schema/p"> <!-- default-init-method = "init" default-destroy-method = "destroy" -->

	<!-- <bean id = "..." class = "..." scope = "singleton/prototype/request/session/global-session" 
		lazy-init = "true" init-method = "..." destroy-method = "..."> collaborators 
		and configuration for this bean go here </bean> -->

	<!-- The init-method attribute specifies a method that is to be called on the bean immediately upon instantiation 
		 - and before a post processor "after init". 
		 Similarly, destroymethod specifies a method that is called just before a bean is removed from the container. -->

	<bean id="beanTemplate" abstract="true" init-method="init"
		destroy-method="destroy" scope="singleton">
		<property name="message" value="Hello!" />
	</bean>
	<bean id="helloWorld" class="com.tutorialspoint.HelloWorld"
		parent="beanTemplate">
		<property name="message" value="Hello World2!" />
	</bean>

	<bean id="helloIsrael" class="com.tutorialspoint.HelloIsrael"
		parent="helloWorld">
		<property name="message" value="Hello Israel1!" />
	</bean>

	<bean id="helloIsrael2" class="com.tutorialspoint.HelloIsrael"
		parent="helloWorld" scope="prototype" lazy-init="false">
		<property name="message" value="Hello Israel2!" />
	</bean>

	<bean class="com.tutorialspoint.InitHelloWorld1"></bean>
	<bean class="com.tutorialspoint.InitHelloWorld2"></bean>






	<!-- Dependency Injection (by setter and by constructor arguments) -->
	
	<!-- Definition for textEditor bean -->
	<bean id="textEditor" class="com.tutorialspoint.TextEditor">
		<!-- the order should be according to the constructor's params order, or 
			use the "index" attribute -->
		<!-- <constructor-arg ref = "spellChecker"/> 
			 <constructor-arg ref = "dummyClass"/> -->
		<constructor-arg ref="dummyClass" index="1" />
		<constructor-arg ref="spellChecker" index="0" />
	</bean>

	<bean id="textEditor2" class="com.tutorialspoint.TextEditor">

		<!-- ******* setter based dependency injection ******* -->
		<property name="spellChecker" ref="spellChecker" />
		<property name="dummyClass">

			<!-- inner bean example (this one is with constructor based dependency 
				injection. inner bean may also be used also with setter based dependency 
				injection) -->
			<!-- <bean id="dummyClass2" class="com.tutorialspoint.DummyClass"> 
					<constructor-arg index="0" value = "2018"/> 
					<constructor-arg index="1" value = "Tel Aviv"/> 
				</bean> -->

			<!-- this syntax (using xmlns:p) is only for setter based dependency injection -->
			<!-- inner bean -->
			<bean id="dummyClass2" class="com.tutorialspoint.DummyClass"
				p:a="12" p:b="blabla" />
		</property>

		<!-- or declare the bean like this: 
		<bean id = "textEditor" class = "com.tutorialspoint.TextEditor" 
			p:spellChecker-ref = "spellChecker" p:dummyClass-ref = "dummyClass" /> 
		</bean> 
		for value type parameters: 
		<bean id = "dummyClass" class = "com.tutorialspoint.DummyClass" p:a = "12" p:b = "blabla" /> </bean> -->

	</bean>



	<!-- Definition for spellChecker bean - when not used as an inner bean inside 
		textEditor bean -->
	<bean id="spellChecker" class="com.tutorialspoint.SpellChecker"></bean>


	<!-- Definition for dummyClass bean - when not used as an inner bean inside 
		textEditor bean -->
	<bean id="dummyClass" class="com.tutorialspoint.DummyClass">
		<!-- <constructor-arg type = "int" value = "2017"/> <constructor-arg type 
			= "java.lang.String" value = "Jerusalem"/> -->

		<constructor-arg index="0" value="2017" />
		<constructor-arg index="1" value="Jerusalem" />
	</bean>



	<bean id="javaCollection1" class="com.tutorialspoint.JavaCollection">
		<!-- results in a setAddressList(java.util.List) call -->
		<property name="addressList">
			<list>
				<value>Israel</value>
				<value>USA</value>
				<value>GB</value>
			</list>				
		</property>
		
		<!-- results in a setAddressSet(java.util.Set) call -->
      <property name = "addressSet">
         <set>
            <value>Israel</value>
			<value>USA</value>
			<value>GB</value>
			<value>France</value>
         </set>
      </property>

      <!-- results in a setAddressMap(java.util.Map) call -->
      <property name = "addressMap">
         <map>
            <entry key = "1" value = "Israel"/>
            <entry key = "2" value = "USA"/>
            <entry key = "3" value = "GB"/>
            <entry key = "4" value = "France"/>
            <entry key = "5" value = "China"/>
         </map>
      </property>
      
      <!-- results in a setAddressProp(java.util.Properties) call -->
      <property name = "addressProp">
         <props>
            <prop key = "one">Israel</prop>
            <prop key = "two">USA</prop>
            <prop key = "three">GB</prop>
            <prop key = "four">France</prop>
            <prop key = "five">China</prop>
            <prop key = "six">Japan</prop>
         </props>
      </property>
	</bean>
	
	
	<bean id="javaCollection2" class="com.tutorialspoint.JavaCollection">
		<!-- results in a setAddressList(java.util.List) call -->
		<constructor-arg>
			<list>
				<value>Israel</value>
				<value>USA</value>
				<value>GB</value>
			</list>				
		</constructor-arg>
		
		<!-- results in a setAddressSet(java.util.Set) call -->
      <constructor-arg>
         <set>
            <value>Israel</value>
			<value>USA</value>
			<value>GB</value>
			<value>France</value>
         </set>
      </constructor-arg>

      <!-- results in a setAddressMap(java.util.Map) call -->
      <constructor-arg>
         <map>
            <entry key = "1" value = "Israel"/>
            <entry key = "2" value = "USA"/>
            <entry key = "3" value = "GB"/>
            <entry key = "4" value = "France"/>
            <entry key = "5" value = "China"/>
         </map>
      </constructor-arg>
      
      <!-- results in a setAddressProp(java.util.Properties) call -->
      <constructor-arg>
         <props>
            <prop key = "one">Israel</prop>
            <prop key = "two">USA</prop>
            <prop key = "three">GB</prop>
            <prop key = "four">France</prop>
            <prop key = "five">China</prop>
            <prop key = "six">Japan</prop>
         </props>
      </constructor-arg>
	</bean>
	
	
	<bean id="javaCollection3" class="com.tutorialspoint.JavaCollection">
		<!-- results in a setAddressList(java.util.List) call -->
		<constructor-arg>
			<list>
				<ref bean="israel"/> <!-- Note that we take this param as a ref to another String bean! -->
				<ref bean="usa"/>
				<value>GB</value>
			</list>				
		</constructor-arg>
		
		<!-- results in a setAddressSet(java.util.Set) call -->
      <constructor-arg>
         <set>
            <ref bean="israel"/>
			<ref bean="usa"/>
			<value></value> 		<!-- Empty string -->
			<null/>  <!-- Null - no wrapping <value> element! -->
         </set>
      </constructor-arg>

      <!-- results in a setAddressMap(java.util.Map) call -->
      <constructor-arg>
         <map>
            <entry key = "1" value = "Israel"/>
            <entry key = "2" value = "USA"/>
            <entry key = "3" value = "GB"/>
            <entry key = "4" value = "France"/>
            <entry key = "5" value = "China"/>
         </map>
      </constructor-arg>
      
      <!-- results in a setAddressProp(java.util.Properties) call -->
      <constructor-arg>
         <props>
            <prop key = "one">Israel</prop>
            <prop key = "two">USA</prop>
            <prop key = "three">GB</prop>
            <prop key = "four">France</prop>
            <prop key = "five">China</prop>
            <prop key = "six">Japan</prop>
         </props>
      </constructor-arg>
	</bean>

	<bean id="israel" class="java.lang.String">
		<constructor-arg>
			<value>Israel</value>
		</constructor-arg>		
	</bean>
	
	<bean id="usa" class="java.lang.String">
		<constructor-arg>
			<value>USA</value>
		</constructor-arg>		
	</bean>
	
	
	
	
	
	<!-- Autowired -->
	
	<bean id = "textEditorAutowiredByName" class = "com.tutorialspoint.TextEditor" autowire = "byName">
      <!-- <property name = "name" value = "Generic Text Editor" /> -->
   </bean>
   
   <bean id = "textEditorAutowiredByType" class = "com.tutorialspoint.TextEditor" autowire = "byType">
      <!-- <property name = "name" value = "Generic Text Editor" /> -->
   </bean>
   
   <!-- Enabling "s_Checker" bean will fail the "byType" / "constructor" / "autodetect" autowiring, since "by type" / "constructor" / "autodetect"
   		autowiring requires only 1 bean of each type required by TextEditor -->
   <!-- <bean id="s_Checker" class="com.tutorialspoint.SpellChecker"></bean> -->
   
   <bean id = "textEditorAutowiredConstructor" class = "com.tutorialspoint.TextEditor" autowire = "constructor">
      <!-- <constructor-arg value = "Generic Text Editor"/> -->
   </bean>
   
   <!-- not supported? -->
   <!-- <bean id = "textEditorAutowiredAutodetect" class = "com.tutorialspoint.TextEditor" autowire = "autodetect">
      <constructor-arg value = "Generic Text Editor"/>
   </bean>   -->
   
     
   
   
   <!-- Context Events -->
   <bean id = "cStartEventHandler" class = "com.tutorialspoint.ContextStartEventHandler"/>
   <bean id = "cStopEventHandler" class = "com.tutorialspoint.ContextStopEventHandler"/>
	


</beans>