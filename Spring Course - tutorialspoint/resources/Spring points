Points:
*******
Core Container: Core, Beans, Context, SpeL
Data Access/Integration: JDBC, ORM, OXM (xml), JMS, Transaction
Web: Web, Web-MVC, Web-Socket, Web-Portlet
Miscellaneous modules: AOP, Aspects, Instrumentation, Messaging, Test 

Application Context lifecycle:
******************************
https://www.codeproject.com/Articles/1195578/Spring-Context-Internals-Part-Refresh


Bean lifecycle:
***************
see https://www.concretepage.com/spring/spring-bean-life-cycle-tutorial
and https://stackoverflow.com/questions/21163355/spring-context-and-bean-lifecycle-callbacks-practical-examples-of-usage
Spring "wraps" any bean with many interfaces that define the phases of its lifecycle. For example, when declaring an init-method on a bean definition 
(e.g. on a xml config file), the bean is wrapped with a InitializingBean interface, and its afterPropertiesSet() is called during the beans lifecycle,
calling the "init-method".

Beans xml tags:
***************
file root:
<beans  default-init-method=,default-destroy-method= ></beans> 

<import> (same as @Import annotation) enables importing more configurations from another xml file. 
		 No need for full file url, use "classpath:" as the base url for the file. 
		 
bean declaration (+ property assign):
<bean id = "helloWorld" class = "com.tutorialspoint.HelloWorld", parent, abstract, scope, name, init, destroy>
  <property name = "message" value = "Hello World!"/>
</bean>

attributes: 
class, 
name, 
scope: singleton (default), prototype, request, session, global-session ,
parent: enables beans definition inheritance (value is the id / name of another bean - the parent) ,
abstract: define a bean as a template to be used as parent by other beans,
constructor-arg,
property,
property.ref: assign a beans' property with a reference to another bean,
autowire: sets the autowiring mode - see the autowire section in the Dependency Injection chapter,
lazy-initialization mode: tells the IoC container to create a bean instance when it is first requested, rather than at the startup.
init-method: A callback to be called just after all necessary properties on the bean have been set by the container. Either this
					   or the bean can implement the InitializingBean interface, and then the afterPropertiesSet() will be called without using this attribute.
default-init-method: same as "init-method" to be used globally (in the <beans> object).
destroy-method: A callback to be used when the container containing the bean is destroyed.  Either this 
					or the bean can implement the DisposableBean interface, and then the destroy() will be called without using this attribute.
					This requires the using of the registerShutdownHook() method of the AbstractApplicationContext.
default-destroy-method: same as "destroy-method" to be used globally (in the <beans> object).


Dependency Injection:
*********************
Setter based:
-------------
<bean ...>
	<property name = "field1" ref = "another bean name to be injected in here"/>
	<property name = "field2" value = "a primitive value or a simple boxed value"/>
</bean>	
or:
adding the namespace xmlns:p = "http://www.springframework.org/schema/p": 
<bean id = "x" class = "xyz" p:field1-ref = "another bean name" p:field2 = "simple value"/>
</bean>

Constructor based:
------------------
<bean ...>
      <constructor-arg ref = "bean name for first constructor param"/>
      <constructor-arg value = "simple value for second constructor param"/>
</bean>
or with explicit ordering:
<bean ...>
      <constructor-arg index="0" ref = "bean name for first constructor param"/>
      <constructor-arg index="1" value = "simple value for second constructor param"/>
</bean>
or with explicit type matching:
<bean ...>
      <constructor-arg type = "com.MyClass" ref = "bean name for first constructor param"/>
      <constructor-arg type = "int" value = "simple value for second constructor param"/>
</bean>

Inner bean (accessible only inside the outer bean):
<bean id = "x" class = "com.FirstClass">
      <property name = "prop">
         <bean id = "y" class = "com.SecondBean"/>   - instead of referencing another "outer" bean
      </property>
</bean>

Injected collections:
<list> - list of values, allowing duplicates.
<set> - set of values but without any duplicates.
<map> - collection of name-value pairs where name and value can be of any type.
<props> - a collection of name-value pairs where the name and value are both Strings.
for example:
<bean>
	  <property name = "someMapProperty">
         <map>
            <entry key = "1" value = "Hello"/>
            <entry key = "2" value = "World"/>
            <entry key = "3" value-ref = "reference to another bean"/>
         </map>
      </property>
</bean>

Injecting Null values (see more examples of nulls and empty strings in the demo application):
<bean id = "..." class = "...">
   <property name = "propName"><null/></property>
</bean>


Autowiring (autowire relationships between collaborating beans without using <constructor-arg> and <property> elements)
-----------
(Two options to trigger it: A. by xml - using the autowire attribute in the bean declaration. B. by annotations - see in "annotations" section)
advantage over regular DI - reduce the need to specify properties or constructor arguments in xml.
disadvantages - Cannot autowire simple properties such as primitives, Strings, and Classes.
				Autowiring is less exact than explicit wiring, so if possible prefer using explicit wiring.
				You can still specify dependencies using <constructor-arg> and <property> settings which will always override autowiring.

modes (set by the "autowire" attribute of the bean. Only when using the autowire attribute. When using annotations there's a unique behavoir
	   to each annotation - see in the annotations section.):
no - default. no autowiring. use explicit wiring (Constructor or Setter based - like seen before).
byName - for properties of the beans on which autowire attribute is set to "byName" in the XML file, 
		 it tries to match and wire its properties with the beans defined by the same names in the configuration file.
byType - tries to match and wire a property if its type matches with exactly one of the bean names (? - should be: type names) in configuration file. 
		 If more than one such beans exists, a fatal exception is thrown.
constructor - same as "byType"(!) but injected as constructor-arg (e.g. when already using one explicit "constructor-arg" param,
			  Spring will know it should use a constructor args injection, and use automatic injection for the other constructor param.)
autodetect - first tries to autowire using "constructor" and not possible, uses "byType". 
 
Java based Configuration
************************
See Annotations: @Configuration, @Bean
Uses a class annotated with @Configuration as a source of bean definitions. 
This can be used with the AnnotationConfigApplicationContext class to retrieve this beans (NO NEED FOR XML FILE!). 
It may use multiple config classes. When using the @Reuqired annotation (see in Annotations) , only the main configuration file should be 
used when instantiating the AnnotationConfigApplicationContext class (see below).
The method name that is annotated with @Bean works as bean ID and it creates and returns the actual bean. 

AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigClass.class);
ctx.register(AppConfig.class, OtherConfig.class);
...
MyService myService = ctx.getBean(MyService.class); (ConfigClass has a "public MyService myService()" method).

Beans dependency:
@Configuration
public class TextEditorConfig {
   @Bean 
   public TextEditor textEditor(){
      return new TextEditor( spellChecker() );
   }
   @Bean 
   public SpellChecker spellChecker(){
      return new SpellChecker( );
   }
}

Annotations:
************
Annotation injection is performed before XML injection. Thus, the latter configuration will override the former for properties wired through both approaches.
Add to configuration xml file: <context:annotation-config/>. You should still declare beans in the xml file 
(the annotations replace some of the features we used in the xml before - but not all)
@Required: applies to bean property setter methods and it indicates that the affected bean property must be populated in XML configuration file 
		   at configuration time. Otherwise, the container throws a BeanInitializationException exception.
@Autowired: on Setter Methods: to get rid of the <property> element in XML configuration file. When Spring finds an @Autowired 
						annotation used with setter methods, it tries to perform *byType* autowiring on the method. (see @Resource annotation.)
			on Properties: to get rid of the setter methods. When you will pass values of autowired properties using <property> Spring will automatically 
						assign those properties with the passed values or references. (*byType* autowiring.)
			on Constructors: indicates that the constructor should be autowired when creating the bean, even if no <constructor-arg> elements 
						are used while configuring the bean in XML file. (*byType* autowiring.)
			with (required=false) option: By default, the @Autowired annotation implies the dependency is required similar to @Required annotation, 
						however, you can turn off the default behavior by using (required=false) option with @Autowired. (*byType* autowiring.)
@PostConstruct: an alternate of the "init-method" attribute.
@PreDestroy: an alternate of the "destroy-method" attribute. (still needs registerShutdownHook())
@Resource: on fields or setter methods. Takes a 'name' attribute which will be interpreted as the bean name to be injected. 
		   It follows by-name autowiring semantics - as opposed to @Autowired annotation that acts byType.
		   If no 'name' is specified explicitly, the default name is derived from the field name or setter method. In case of a field, it takes the field name; 
		   in case of a setter method, it takes the bean property name.
@Qualifier: when you create more than one bean of the same type and want to wire only one of them with a property. (to be used together with @Autowired)		   
@Configuration: indicates that the class can be used by the Spring IoC container as a source of bean definitions.
@Bean: a method annotated with @Bean will return an object that should be registered as a bean in the 
	  Spring application context (via annotations or xml). Properties of this annotations: (initMethod = "init", destroyMethod = "cleanup" )
@Import: in Java script configuration, allows for loading @Bean definitions from another configuration class.
@Scope: defines the beans scope in a Java configuration class. Use it - @Scope("prototype").

Context types (IoC Containers):
*******************************
ApplicationContext - abstract
AbstractApplicationContext - abstract
FileSystemXmlApplicationContext - Loads the beans config from an XML file. Need to provide the full path of the XML to the constructor.
ClassPathXmlApplicationContext  - loads the beans config from an XML file. No need to provide the FULL path of the XML file but you need to set the CLASSPATH properly because this container will look like bean configuration XML file in CLASSPATH.
WebXmlApplicationContext − loads beans config XML file from within a web application.
AnnotationConfigApplicationContext - reads configuration from Annotations - Java based configuration. Reads configuration from Java code.
BeanFactory - the simplest container providing the basic support for DI (and also: BeanFactoryAware, InitializingBean, DisposableBean).
It still exists for backward compatibility. Use ApplicationContext instead.
AnnotationConfigApplicationContext

Listening to Context Events
***************************
ApplicationContext manages the complete life cycle of the beans. The ApplicationContext publishes certain types of events when loading the beans:
ContextRefreshedEvent - published when the ApplicationContext is either initialized or refreshed. This can also be raised using the refresh() method on the
						ConfigurableApplicationContext interface.
ContextStartedEvent - published when the ApplicationContext is started using the start() method on the ConfigurableApplicationContext interface. 
					  You can poll your database or you can restart any stopped application after receiving this event.
ContextStoppedEvent - published when the ApplicationContext is stopped using the stop() method on the ConfigurableApplicationContext interface. 
					  You can do required housekeep work after receiving this event.
ContextClosedEvent -  published when the ApplicationContext is closed using the close() method on the ConfigurableApplicationContext interface. 
					  A closed context reaches its end of life; it cannot be refreshed or restarted.
RequestHandledEvent - This is a web-specific event telling all beans that an HTTP request has been serviced.

Event handling in the ApplicationContext is provided through the ApplicationEvent class and ApplicationListener interface (has one method - onApplicationEvent). A (declared) Bean that implements the ApplicationListener interface will be notified with an ApplicationEvent instance every time the ApplicationContext publishes an event.
Spring's event handling is single-threaded so if an event is published, until and unless all the receivers get the message, the processes are blocked and the flow will not continue. Hence, care should be taken when designing your application if the event handling is to be used.

Custom events:
Create a custom event that extends ApplicationEvent. Create a "Publisher" class which implements ApplicationEventPublisherAware. (Otherwise, it may get ApplicationEventPublisher from the Spring runtime - via @Autowired or else, and use it to publish the event.) Declare this class in XML configuration file as a bean (otherwise the container will not identify it as an events publisher). Create a "Handler" class which implements ApplicationListener interface (has onApplicationEvent method) for the custom event. Declare the handler as a bean (in xml file).
NOTE - Spring events, also the custom eventss, are synchronous!!! (see "Async events")

In order to handle an event and return a new event from the handler, see:
http://zoltanaltfatter.com/2016/05/11/application-events-with-spring/

Async events:
By default, the "publishing" thread (like the one of ApplicationContext) will block until all listeners have finished processing the event. The advantage of this is that if the publisher is running in a transactional context, the listener will receive the event within the same transactional context. However if processing events takes long, we can tell Spring to handle events asynchronously. 
In order to do this we need to redefine the ApplicationEventMulticaster bean with id applicationEventMulticaster configuring it with an asynchronous TaskExecutor:

@Bean
ApplicationEventMulticaster applicationEventMulticaster() {
    SimpleApplicationEventMulticaster eventMulticaster = new SimpleApplicationEventMulticaster();
    eventMulticaster.setTaskExecutor(new SimpleAsyncTaskExecutor());
    eventMulticaster.setErrorHandler(TaskUtils.LOG_AND_SUPPRESS_ERROR_HANDLER);
    return eventMulticaster;
}

or in xml config file:
<bean id="applicationEventMulticaster" class="org.springframework.context.event.SimpleApplicationEventMulticaster">
    <property name="taskExecutor" >
        <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor">
        </bean>
    </property>
</bean>

NOTE: this change will be global to the ApplicationContext meaning that all event listeners (e.g. methods annotated with @EventListener, or any implementations of ApplicationListener) will be executed asynchronously. see: http://learningviacode.blogspot.com/2012/08/publishing-events-asynchronously.html
If we like to have some events delivered synchronously others asynchronously within the same ApplicationContext check out this blog post:
https://www.keyup.eu/en/blog/101-synchronous-and-asynchronous-spring-events-in-one-application

A much easier way to handle some events asynchronously is to use the @Async annotation.

@Async
@EventListener
void handleAsync(SomeEvent event) {
    // processed in a separate thread.
}
(TODO: does is work for the non-custom events

Filtering:
It is possible to filter the events in the listener via the condition attribute:
@EventListener(condition = "#customEvent.someProperty >= 100")

Transaction bound events:
With synchronous event handling the , the listener can be bound to a phase of the transaction in which the publisher is running.
* listener should only handle the TaskScheduledEvent once the transaction in which it was published committed *successfully*:
@TransactionalEventListener(fallbackExecution=true/false, phase = TransactionPhase.AFTER_ROLLBACK)
public void handleAfterCommit(TaskScheduledEvent event)
    ...
}
The fallbackExecution attribute tells Spring weather to run the handler when no transaction is used.
The phase attribute tells Spring in which phase of the transaction to use the handler.
 
 
AOP
***
Aspect-Oriented Programming is about breaking down program logic into distinct parts called so-called concerns. 
The functions that span multiple points of an application are called cross-cutting concerns and these cross-cutting concerns are conceptually separate from the application's business logic. 
There are various common good examples of aspects like logging, auditing, declarative transactions, security, caching, etc.
The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. 
Dependency Injection helps you decouple your application objects from each other 
and AOP helps you decouple cross-cutting concerns from the objects that they affect. 
AOP is like triggers in programming languages such as Perl, .NET (SQL), Java, and others.


Useful Interfaces:
******************
InitializingBean (see above - same as declaring "init-method")
DisposableBean (see above - same as declaring "destroy-method")
BeanPostProcessor: defines callback methods to run before/after the Spring container finishes initializing a bean. You may create some of these and control
				   their order of calling by implementing the Ordered interface. You should register these BeanPostProcessors as beans. 
				   An ApplicationContext automatically detects any beans that are defined with the implementation of the BeanPostProcessor interface 
				   and registers these beans as postprocessors. The "after init" method needs the AbstractApplicationContext.registerShutdownHook() to run.
				   The "before init" method will run before the method that is registered in the bean's init-method attribute.
				   The "after init" method will run after the method that is registered in the bean's init-method attribute.
Ordered: see BeanPostProcessor.			   






see also:
search:
full bean lifecycle
full context life cycle

http://www.java2novice.com/spring/
